# Copyright 2025 Naked Software, LLC (https://www.naked.software)
#
# Version 1.0.0 (June 8, 2025)
#
# This AI Hub License Agreement ("Agreement") is a legal agreement between you
# ("Licensee") and Naked Software, LLC ("Licensor") for the use of the AI Hub
# software product ("Software"). By using the Software, you agree to be bound
# by the terms of this Agreement.
#
# 1. Grant of License
#
# Licensor grants Licensee a non-exclusive, non-transferable, non-sublicensable
# license to use the Software for non-commercial, educational, or other
# non-production purposes. Licensee may not use the Software for any commercial
# purposes without purchasing a commercial license from Licensor.
#
# 2. Commercial Use
#
# To use the Software for commercial purposes, Licensee must purchase a
# commercial license from Licensor. A commercial license allows Licensee to use
# the Software in production environments, build their own version, and add
# custom features or bug fixes. Licensee may not sell the Software or any
# derivative works to others.
#
# 3. Derivative Works
#
# Licensee may create derivative works of the Software for their own use,
# provided that they maintain a valid commercial license. Licensee may not sell
# or distribute derivative works to others. Any derivative works must include a
# copy of this Agreement and retain all copyright notices.
#
# 4. Sharing and Contributions
#
# Licensee may share their changes or bug fixes to the Software with others,
# provided that such changes are made freely available and not sold. Licensee 
# is encouraged to contribute their bug fixes back to Licensor for inclusion in
# the Software.
#
# 5. Restrictions
#
# Licensee may not:
# - Use the Software for any commercial purposes without a valid commercial
#   license.
# - Sell, sublicense, or distribute the Software or any derivative works.
# - Remove or alter any copyright notices or proprietary legends on the 
#   Software.
#
# 6. Termination
#
# This Agreement is effective until terminated. Licensor may terminate this
# Agreement at any time if Licensee breaches any of its terms. Upon 
# termination, Licensee must cease all use of the Software and destroy all 
# copies in their possession.
#
# 7. Disclaimer of Warranty
#
# The Software is provided "as is" without warranty of any kind, express or
# implied, including but not limited to the warranties of merchantability,
# fitness for a particular purpose, and noninfringement. In no event shall
# Licensor be liable for any claim, damages, or other liability, whether in an
# action of contract, tort, or otherwise, arising from, out of, or in 
# connection with the Software or the use or other dealings in the Software.
#
# 8. Limitation of Liability
#
# In no event shall Licensor be liable for any indirect, incidental, special,
# exemplary, or consequential damages (including, but not limited to,
# procurement of substitute goods or services; loss of use, data, or profits; 
# or business interruption) however caused and on any theory of liability, 
# whether in contract, strict liability, or tort (including negligence or 
# otherwise) arising in any way out of the use of the Software, even if advised
# of the possibility of such damage.
#
# 9. Governing Law
#
# This Agreement shall be governed by and construed in accordance with the laws
# of the jurisdiction in which Licensor is located, without regard to its
# conflict of law principles.
#
# 10. Entire Agreement
#
# This Agreement constitutes the entire agreement between the parties with
# respect to the Software and supersedes all prior or contemporaneous
# understandings regarding such subject matter.
#
# By using the Software, you acknowledge that you have read this Agreement,
# understand it, and agree to be bound by its terms and conditions.

name: Prebuild Development Container

on:
  push:
    branches:
      - main
    paths:
      - .github/.devcontainer/**
  pull_request:
    branches:
      - main
    paths:
      - .github/.devcontainer/**
  workflow_dispatch:

env:
  CONTAINER_REGISTRY: ghcr.io
  CONTAINER_IMAGE_NAME: nakedsoftware/ai-hub-dev

permissions:
  attestations: write
  contents: write
  id-token: write
  packages: write
  pull-requests: write

jobs:
  prebuild:
    name: Prebuild Development Container for ${{ matrix.architecture.arch }}
    runs-on: ${{ matrix.architecture.runner }}
    strategy:
      matrix:
        architecture:
          - arch: linux/amd64
            runner: ubuntu-24.04
          - arch: linux/arm64
            runner: ubuntu-24.04-arm
      fail-fast: false
    outputs:
      IMAGE_DIGEST_linux_amd64: ${{ steps.build.outputs.IMAGE_DIGEST_linux_amd64 }}
      IMAGE_DIGEST_linux_arm64: ${{ steps.build.outputs.IMAGE_DIGEST_linux_arm64 }}
    steps:
      - name: Check Out Source Code
        uses: actions/checkout@v4
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log into the ${{ env.CONTAINER_REGISTRY }} Registry
        if: github.event_name != 'pull_request'
        uses: docker/setup-buildx-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_IMAGE_NAME }}
          sep-tags: ','
      - name: Build Development Container
        id: build
        uses: ./.github/actions/devcontainer-ci
        with:
          imageName: ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_IMAGE_NAME }}
          imageTag: ${{ steps.meta.outputs.tags }}
          subFolder: .github
          push: filter
          refFilterForPush: refs/heads/main
          eventFilterForPush: push
          cacheFrom: ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_IMAGE_NAME }}
          platform: ${{ matrix.architecture.arch }}
      - name: Set Outputs
        if: always()
        run: |
          DIGESTS_JSON='${{ steps.build.outputs.imageDigests }}'
          PLATFORM="${{ matrix.architecture.arch }}"
          DIGEST=$(echo $DIGESTS_JSON | jq -r --arg platform "$PLATFORM" '.[$platform]')
          echo "IMAGE_DIGEST_${PLATFORM//\//_}=${DIGEST}" >> $GITHUB_OUTPUT

  publish_multiplatform_image:
    name: Publish Multiplatform Image
    needs: prebuild
    runs-on: ubuntu-24.04
    if: github.event_name != 'pull_request' && needs.prebuild.outputs.IMAGE_DIGEST_linux_amd64 && needs.prebuild.outputs.IMAGE_DIGEST_linux_arm64
    steps:
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log into the ${{ env.CONTAINER_REGISTRY }} Registry
        if: github.event_name != 'pull_request'
        uses: docker/setup-buildx-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_IMAGE_NAME }}
          tags: |
            type=match,pattern=devcontainer\/v(\d+\.\d+\.\d+),group=1
            type=match,pattern=devcontainer\/v(\d+\.\d+),group=1
            type=match,pattern=devcontainer\/v([1-9][0-9]+),group=1
            type=ref,event=branch
            type=ref,event=pr
      - name: Push Manifest List
        run: |
          IMAGE=${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_IMAGE_NAME }}
          docker buildx imagetools create \
            -t ${IMAGE}:latest \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            ${IMAGE}@${{ needs.prebuild.outputs.IMAGE_DIGEST_linux_amd64 }} \
            ${IMAGE}@${{ needs.prebuild.outputs.IMAGE_DIGEST_linux_arm64 }}
      - name: Inspect Manifest
        run: |
          docker buildx imagetools inspect ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_IMAGE_NAME }}:latest
            